from functools import partial
from math import gcd
from IDDH import *

# m = 7875195248299573808823712291978888274442999959677694753912571847780087214002722858683689069525773011732211611836327013706360435849189331163147852550661829
# phi_m = 7875195248299573808823712291978888274442999959677694753912571847780087214002545356037534989272459012221013085436360316370101093947233788503313425120303276
# y = 6299229908833840118619829672945751411735622605656289025512914596518177159383400059722142269040719786180255780735904363854210629937073277010069155086020014
# g = 3052880011133317644565832334485921658988691008053236805842669552104284584971658329333569136294140088171228312120170305145176435676513862646086102301423957

m = 10149176142605696715050247890886518684869103063509537620648493592653337479126199564779492324587095488340968978086015701129456592142832211053079944961964657
phi_m = 10149176142605696715050247890886518684869103063509537620648493592653337479125996503442675300056368522775758150165989588230953032145289349735940133307374080
g = 7591750238283022226591624292439856861266114590948725596089923869315745586749399736727671118946044001928889845078615515383621527746449037726675666424737183
y = 2891056567964536419792226341900413927324947280774856569161137065304101982988190331398099565097205452998393309058780684180528268411016489168811183745218800

def shor_oracle(base, target, x, d):
    return (d * x) % phi_m

def find_x(x_prime, A, d):
    inv_d = pow(d, -1, m)
    if phi_m == m - 1:
        # We note that this is not a brute force search, and in fact most values of k give valid candidates
        for k in range(0, d - 1):
            candidate = ((x_prime - k) * inv_d) % m
            if pow(g, candidate * y, m) == A:
                return candidate
    else:
        # We note that this is not a brute force search, and in fact most values of k give valid candidates
        for k in range(0, d - 1):
            candidate = ((x_prime + k * (phi_m - m)) * inv_d) % m
            if pow(g, candidate * y, m) != A:
                print("found invalid candidate")
                # return candidate
    print("FAILED TO FIND X")

def attack(A, x):
    d = gcd(y, phi_m)
    instance_oracle = partial(shor_oracle, x = x, d = d)    # Setup our oracle

    y_prime = (y * pow(d, -1, m)) % m

    base = pow(g, y_prime, m)

    x_prime = instance_oracle(base, A)

    x_found = find_x(x_prime, A, d)

    print("x:     ", x)
    print("found: ", x_found)
    assert pow(g, x_found * y, m) == A, "attack failed to recover secret"
    print("attack successfully recovered secret")


def run_attack():
    (A, x) = keygen()

    attack(A, x)
